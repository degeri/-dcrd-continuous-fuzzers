package fuzz_stdscript

import (
	dcrd_stdscript "github.com/decred/dcrd/txscript/v4/stdscript"
	"strconv"
)

func Fuzz(input []byte) int {
	dcrd_stdscript.DetermineRequiredSigs(0, input)
	dcrd_stdscript.DetermineRequiredSigsV0(input)
	dcrd_stdscript.ExtractCompressedPubKeyV0(input)
	dcrd_stdscript.ExtractPubKeyAltDetailsV0(input)
	dcrd_stdscript.ExtractPubKeyEd25519V0(input)
	dcrd_stdscript.ExtractPubKeyHashAltDetailsV0(input)
	dcrd_stdscript.ExtractPubKeyHashEd25519V0(input)
	dcrd_stdscript.ExtractPubKeyHashSchnorrSecp256k1V0(input)
	dcrd_stdscript.ExtractPubKeyHashV0(input)
	dcrd_stdscript.ExtractPubKeySchnorrSecp256k1V0(input)
	dcrd_stdscript.ExtractPubKeyV0(input)
	dcrd_stdscript.ExtractScriptHashV0(input)
	dcrd_stdscript.ExtractStakeChangePubKeyHashV0(input)
	dcrd_stdscript.ExtractStakeChangeScriptHashV0(input)
	dcrd_stdscript.ExtractStakeGenPubKeyHashV0(input)
	dcrd_stdscript.ExtractStakeGenScriptHashV0(input)
	dcrd_stdscript.ExtractStakePubKeyHashV0(input)
	dcrd_stdscript.ExtractStakeRevocationPubKeyHashV0(input)
	dcrd_stdscript.ExtractStakeRevocationScriptHashV0(input)
	dcrd_stdscript.ExtractStakeScriptHashV0(input)
	dcrd_stdscript.ExtractStakeSubmissionPubKeyHashV0(input)
	dcrd_stdscript.ExtractStakeSubmissionScriptHashV0(input)
	dcrd_stdscript.ExtractTreasuryGenPubKeyHashV0(input)
	dcrd_stdscript.ExtractTreasuryGenScriptHashV0(input)
	dcrd_stdscript.ExtractUncompressedPubKeyV0(input)
	dcrd_stdscript.IsMultiSigScript(0, input)
	dcrd_stdscript.IsMultiSigScriptV0(input)
	dcrd_stdscript.IsMultiSigSigScriptV0(input)
	dcrd_stdscript.IsNullDataScript(0, input)
	dcrd_stdscript.IsNullDataScriptV0(input)
	dcrd_stdscript.IsPubKeyEd25519Script(0, input)
	dcrd_stdscript.IsPubKeyEd25519ScriptV0(input)
	dcrd_stdscript.IsPubKeyHashEd25519Script(0, input)
	dcrd_stdscript.IsPubKeyHashEd25519ScriptV0(input)
	dcrd_stdscript.IsPubKeyHashSchnorrSecp256k1Script(0, input)
	dcrd_stdscript.IsPubKeyHashSchnorrSecp256k1ScriptV0(input)
	dcrd_stdscript.IsPubKeyHashScript(0, input)
	dcrd_stdscript.IsPubKeyHashScriptV0(input)
	dcrd_stdscript.IsPubKeySchnorrSecp256k1Script(0, input)
	dcrd_stdscript.IsPubKeySchnorrSecp256k1ScriptV0(input)
	dcrd_stdscript.IsPubKeyScript(0, input)
	dcrd_stdscript.IsPubKeyScriptV0(input)
	dcrd_stdscript.IsScriptHashScript(0, input)
	dcrd_stdscript.IsScriptHashScriptV0(input)
	dcrd_stdscript.IsStakeChangePubKeyHashScript(0, input)
	dcrd_stdscript.IsStakeChangePubKeyHashScriptV0(input)
	dcrd_stdscript.IsStakeChangeScriptHashScript(0, input)
	dcrd_stdscript.IsStakeChangeScriptHashScriptV0(input)
	dcrd_stdscript.IsStakeGenPubKeyHashScript(0, input)
	dcrd_stdscript.IsStakeGenPubKeyHashScriptV0(input)
	dcrd_stdscript.IsStakeGenScriptHashScript(0, input)
	dcrd_stdscript.IsStakeGenScriptHashScriptV0(input)
	dcrd_stdscript.IsStakeRevocationPubKeyHashScript(0, input)
	dcrd_stdscript.IsStakeRevocationPubKeyHashScriptV0(input)
	dcrd_stdscript.IsStakeRevocationScriptHashScript(0, input)
	dcrd_stdscript.IsStakeRevocationScriptHashScriptV0(input)
	dcrd_stdscript.IsStakeSubmissionPubKeyHashScript(0, input)
	dcrd_stdscript.IsStakeSubmissionPubKeyHashScriptV0(input)
	dcrd_stdscript.IsStakeSubmissionScriptHashScript(0, input)
	dcrd_stdscript.IsStakeSubmissionScriptHashScriptV0(input)
	if len(input) > 0 {
		dcrd_stdscript.IsStandardAltSignatureTypeV0(input[0])
	}
	dcrd_stdscript.IsTreasuryAddScript(0, input)
	dcrd_stdscript.IsTreasuryAddScriptV0(input)
	dcrd_stdscript.IsTreasuryGenPubKeyHashScript(0, input)
	dcrd_stdscript.IsTreasuryGenPubKeyHashScriptV0(input)
	dcrd_stdscript.IsTreasuryGenScriptHashScript(0, input)
	dcrd_stdscript.IsTreasuryGenScriptHashScriptV0(input)
	dcrd_stdscript.MultiSigRedeemScriptFromScriptSigV0(input)
	i, err := strconv.Atoi(string(input))
	if err == nil {
		dcrd_stdscript.MultiSigScriptV0(i, input)
	}
	dcrd_stdscript.ProvablyPruneableScriptV0(input)
	return 0
}
